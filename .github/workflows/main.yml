name: Build NetHunter Kernel - A23

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Explorar estructura completa
      run: |
        echo "🔍 EXPLORACIÓN COMPLETA DEL REPOSITORIO"
        echo "========================================"
        echo ""
        echo "📁 LISTA COMPLETA DE ARCHIVOS:"
        find . -type f | grep -v ".git" | sort
        echo ""
        echo "📊 INFORMACIÓN DEL REPOSITORIO:"
        echo "Tamaño total: $(du -sh .)"
        echo "Número de archivos: $(find . -type f | wc -l)"
        echo ""
        echo "🔎 ARCHIVOS IMPORTANTES:"
        find . -name "Makefile" -o -name "*.mk" -o -name "Kconfig" -o -name "Kbuild" | head -20
        echo ""
        echo "📋 ARCHIVOS DE CONFIGURACIÓN:"
        find . -name "*defconfig" -o -name ".config" -o -name "config" | head -20
        echo ""
        echo "📦 ARCHIVOS DE CÓDIGO:"
        find . -name "*.c" -o -name "*.h" -o -name "*.dts" -o -name "*.dtsi" | head -20

    - name: Instalar dependencias básicas
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git bc bison flex libssl-dev make \
          gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi \
          libncurses-dev liblz4-tool python3 \
          zip unzip curl wget file

    - name: Intentar compilar si hay Makefile
      id: compile
      run: |
        # Buscar cualquier Makefile
        MAKEFILE=$(find . -name "Makefile" -type f | head -1)
        
        if [ -n "$MAKEFILE" ]; then
          echo "🎯 Makefile encontrado en: $MAKEFILE"
          echo "has_makefile=true" >> $GITHUB_OUTPUT
          
          # Cambiar al directorio del Makefile
          MAKEFILE_DIR=$(dirname "$MAKEFILE")
          echo "📁 Cambiando a directorio: $MAKEFILE_DIR"
          cd "$MAKEFILE_DIR"
          
          # Configurar entorno
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          echo "🔨 Intentando compilar..."
          
          # Intentar diferentes configuraciones
          if [ -f "arch/arm64/configs/spes_defconfig" ]; then
            make spes_defconfig
          elif [ -f "arch/arm64/configs/a23_defconfig" ]; then
            make a23_defconfig
          elif [ -n "$(find . -name '*defconfig' | head -1)" ]; then
            DEFCONFIG=$(find . -name '*defconfig' | head -1)
            CONFIG_NAME=$(basename "$DEFCONFIG" .defconfig)
            make $CONFIG_NAME
          else
            echo "⚠️ No hay defconfig, intentando compilar directamente"
          fi
          
          # Compilar
          make -j2 || echo "❌ Compilación falló, pero continuamos"
          
        else
          echo "❌ No se encontró Makefile"
          echo "has_makefile=false" >> $GITHUB_OUTPUT
        fi

    - name: Recopilar todos los archivos posibles
      run: |
        mkdir -p artifacts
        echo "📦 Recopilando archivos del repositorio..."
        
        # Copiar archivos importantes
        find . -name "Makefile" -exec cp --parents {} artifacts/ \; 2>/dev/null || true
        find . -name "*.c" -exec cp --parents {} artifacts/ \; 2>/dev/null || true
        find . -name "*.h" -exec cp --parents {} artifacts/ \; 2>/dev/null || true
        find . -name "*.dts" -exec cp --parents {} artifacts/ \; 2>/dev/null || true
        find . -name "*.dtsi" -exec cp --parents {} artifacts/ \; 2>/dev/null || true
        find . -name "*defconfig" -exec cp --parents {} artifacts/ \; 2>/dev/null || true
        find . -name ".config" -exec cp --parents {} artifacts/ \; 2>/dev/null || true
        
        # Si hay archivos compilados, copiarlos
        find . -name "Image*" -exec cp --parents {} artifacts/ \; 2>/dev/null || true
        find . -name "*.ko" -exec cp --parents {} artifacts/ \; 2>/dev/null || true
        find . -name "vmlinux" -exec cp --parents {} artifacts/ \; 2>/dev/null || true
        
        # Crear archivo de información
        echo "Información del repositorio A23kernetnh" > artifacts/README.txt
        echo "Fecha: $(date)" >> artifacts/README.txt
        echo "Commit: $GITHUB_SHA" >> artifacts/README.txt
        echo "URL: $GITHUB_REPOSITORY" >> artifacts/README.txt
        
        # Crear ZIP
        cd artifacts
        zip -r ../repository-contents.zip .
        cd ..

    - name: Subir artifacts
      uses: actions/upload-artifact@v4
      with:
        name: repository-analysis
        path: |
          repository-contents.zip
        retention-days: 30

    - name: Crear reporte final
      run: |
        echo "📊 REPORTE FINAL"
        echo "================"
        echo "Repositorio: $GITHUB_REPOSITORY"
        echo "¿Tiene Makefile?: ${{ steps.compile.outputs.has_makefile }}"
        echo ""
        echo "📋 RECOMENDACIONES:"
        if [ "${{ steps.compile.outputs.has_makefile }}" = "true" ]; then
          echo "✅ Este repositorio parece ser un kernel compilable"
          echo "💡 Sugerencia: Revisa los artifacts para ver los archivos de compilación"
        else
          echo "❌ Este NO parece ser un árbol de kernel Linux"
          echo "💡 Sugerencia:"
          echo "   - Si es un kernel, asegúrate de tener un Makefile en la raíz"
          echo "   - Si es solo código fuente, considera usar un repositorio de kernel completo"
          echo "   - Puedes clonar un kernel base y aplicar tus cambios"
        fi
