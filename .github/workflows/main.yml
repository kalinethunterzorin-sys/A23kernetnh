name: Build A23 NetHunter Kernel

on:
  push:
    branches: [ main, master ]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Explorar estructura del repositorio
      run: |
        echo "üìÅ Estructura del repositorio:"
        find . -type f -name "*defconfig" | head -20
        echo "üìÅ Directorios principales:"
        ls -la
        echo "üìÅ Directorio arch:"
        find . -name "arch" -type d | head -5
        
    - name: Instalar dependencias
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git bc bison flex libssl-dev make \
          gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi \
          libncurses-dev liblz4-tool python3 \
          zip unzip curl wget
        
    - name: Configurar entorno
      run: |
        export ARCH=arm64
        export SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        export KBUILD_BUILD_USER="GitHub-Actions"
        export KBUILD_BUILD_HOST="GitHub"
        echo "ARCH=arm64" >> $GITHUB_ENV
        echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
        
    - name: Buscar y configurar kernel
      run: |
        echo "üîç Buscando archivos de configuraci√≥n..."
        
        # Buscar defconfig en diferentes ubicaciones posibles
        if [ -f "arch/arm64/configs/spes_defconfig" ]; then
          echo "üìù Usando arch/arm64/configs/spes_defconfig"
          make spes_defconfig ARCH=arm64
        elif [ -f "arch/arm64/configs/a23_defconfig" ]; then
          echo "üìù Usando arch/arm64/configs/a23_defconfig"
          make a23_defconfig ARCH=arm64
        elif [ -f "defconfig" ]; then
          echo "üìù Usando defconfig en ra√≠z"
          cp defconfig .config
        elif [ -f ".config" ]; then
          echo "üìù Usando .config existente"
        else
          echo "üîç Buscando cualquier defconfig..."
          DEFCONFIG=$(find . -name "*defconfig" -type f | grep -v ".git" | head -1)
          if [ -n "$DEFCONFIG" ]; then
            echo "üìù Usando: $DEFCONFIG"
            cp "$DEFCONFIG" .config
          else
            echo "‚ùå No se encontr√≥ ning√∫n archivo de configuraci√≥n"
            echo "üìÅ Lista completa de archivos:"
            find . -type f -name "*.config" -o -name "*defconfig" | head -20
            exit 1
          fi
        fi
        
    - name: Compilar kernel
      run: |
        echo "üî® Compilando kernel..."
        make -j$(nproc) ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu-
        
    - name: Buscar archivos compilados
      run: |
        echo "üìÅ Buscando archivos del kernel compilado..."
        find . -name "Image*" -type f | head -10
        find . -name "*.dtb" -type f | head -10
        find . -name "vmlinux" -type f | head -5
        
    - name: Empaquetar resultados
      run: |
        mkdir -p output
        
        # Buscar y copiar archivos compilados en diferentes ubicaciones
        find . -name "Image.gz-dtb" -type f -exec cp {} output/ \; 2>/dev/null || true
        find . -name "Image" -type f -exec cp {} output/ \; 2>/dev/null || true
        find . -name "vmlinux" -type f -exec cp {} output/ \; 2>/dev/null || true
        
        # Si no se encontraron archivos, crear un archivo de error
        if [ -z "$(ls -A output)" ]; then
          echo "‚ö†Ô∏è No se encontraron archivos compilados"
          echo "Esto puede ser normal si la compilaci√≥n fall√≥" > output/error.txt
        fi
        
        # Crear ZIP
        cd output
        zip -9 A23-Kernel-$(date +%Y%m%d-%H%M).zip *
        
    - name: Subir artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-build
        path: output/*
        retention-days: 30
        
    - name: Crear release si hay archivos
      if: success() && hash('output/*.zip')
      uses: softprops/action-gh-release@v1
      with:
        files: output/*.zip
        body: |
          # A23 NetHunter Kernel
          **Compilaci√≥n autom√°tica desde GitHub Actions**
          
          - **Fecha:** $(date +'%Y-%m-%d %H:%M')
          - **Estado:** Compilaci√≥n completada
          
          ## Notas
          Descarga el ZIP y verifica los archivos incluidos.
        tag_name: auto-$(date +%Y%m%d-%H%M)
        prerelease: true