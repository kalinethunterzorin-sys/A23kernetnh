name: Build A23 NetHunter Kernel

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  explore:
    runs-on: ubuntu-latest
    outputs:
      has_defconfig: ${{ steps.explore.outputs.has_defconfig }}
      has_config: ${{ steps.explore.outputs.has_config }}
      has_makefile: ${{ steps.explore.outputs.has_makefile }}
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Explorar estructura completa
      id: explore
      run: |
        echo "🔍 EXPLORANDO ESTRUCTURA DEL REPOSITORIO..."
        echo "📁 Estructura completa:"
        find . -type f -name "*" | grep -v ".git" | sort | head -50
        
        echo ""
        echo "🔎 Buscando archivos específicos:"
        echo "Makefile: $(find . -name "Makefile" -type f | head -1 || echo 'NO')"
        echo "defconfig: $(find . -name "*defconfig" -type f | head -1 || echo 'NO')"
        echo ".config: $(find . -name ".config" -type f | head -1 || echo 'NO')"
        echo "Kbuild: $(find . -name "Kbuild" -type f | head -1 || echo 'NO')"
        echo "Kconfig: $(find . -name "Kconfig" -type f | head -1 || echo 'NO')"
        
        # Configurar outputs
        if [ -n "$(find . -name "*defconfig" -type f | head -1)" ]; then
          echo "has_defconfig=true" >> $GITHUB_OUTPUT
        else
          echo "has_defconfig=false" >> $GITHUB_OUTPUT
        fi
        
        if [ -n "$(find . -name ".config" -type f | head -1)" ]; then
          echo "has_config=true" >> $GITHUB_OUTPUT
        else
          echo "has_config=false" >> $GITHUB_OUTPUT
        fi
        
        if [ -f "Makefile" ]; then
          echo "has_makefile=true" >> $GITHUB_OUTPUT
        else
          echo "has_makefile=false" >> $GITHUB_OUTPUT
        fi

  build:
    runs-on: ubuntu-latest
    needs: explore
    if: needs.explore.outputs.has_makefile == 'true'
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Instalar dependencias
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git bc bison flex libssl-dev make \
          gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi \
          libncurses-dev liblz4-tool python3 \
          zip unzip curl wget
        
    - name: Configurar entorno
      run: |
        export ARCH=arm64
        export SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        export KBUILD_BUILD_USER="GitHub-Actions"
        export KBUILD_BUILD_HOST="GitHub"
        
    - name: Intentar compilación con diferentes enfoques
      run: |
        echo "🔄 Intentando diferentes métodos de compilación..."
        
        # Método 1: Si hay defconfig específico
        if [ -f "arch/arm64/configs/spes_defconfig" ]; then
          echo "📝 Método 1: Usando spes_defconfig"
          make spes_defconfig ARCH=arm64
          make -j2 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu-
          
        # Método 2: Si hay cualquier defconfig
        elif [ -n "$(find . -name "*defconfig" -type f | head -1)" ]; then
          DEFCONFIG=$(find . -name "*defconfig" -type f | head -1)
          echo "📝 Método 2: Usando $DEFCONFIG"
          CONFIG_NAME=$(basename "$DEFCONFIG" .defconfig)
          make $CONFIG_NAME ARCH=arm64
          make -j2 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu-
          
        # Método 3: Si hay .config existente
        elif [ -f ".config" ]; then
          echo "📝 Método 3: Usando .config existente"
          make -j2 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu-
          
        # Método 4: Compilación directa (puede fallar)
        else
          echo "📝 Método 4: Compilación directa"
          make -j2 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- 2>&1 | head -50
        fi
        
    - name: Recopilar resultados
      run: |
        mkdir -p output
        echo "📦 Recopilando archivos compilados..."
        
        # Buscar cualquier archivo que pueda ser resultado de compilación
        find . -name "Image*" -type f -exec cp {} output/ \; 2>/dev/null || true
        find . -name "*.ko" -type f -exec cp {} output/ \; 2>/dev/null || true
        find . -name "vmlinux" -type f -exec cp {} output/ \; 2>/dev/null || true
        find . -name "*.dtb" -type f -exec cp {} output/ \; 2>/dev/null || true
        find . -name "zImage" -type f -exec cp {} output/ \; 2>/dev/null || true
        
        # Si no hay archivos, crear log
        if [ -z "$(ls -A output)" ]; then
          echo "No se generaron archivos compilados" > output/build-log.txt
          echo "Esto puede ser normal para este repositorio" >> output/build-log.txt
        fi
        
        # Crear ZIP
        cd output
        zip -9 build-results-$(date +%Y%m%d).zip *
        
    - name: Subir artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: output/*
        retention-days: 7

  report:
    runs-on: ubuntu-latest
    needs: explore
    steps:
    - name: Generar reporte
      run: |
        echo "📊 REPORTE DEL REPOSITORIO"
        echo "==========================="
        echo "¿Tiene defconfig?: ${{ needs.explore.outputs.has_defconfig }}"
        echo "¿Tiene .config?: ${{ needs.explore.outputs.has_config }}"
        echo "¿Tiene Makefile?: ${{ needs.explore.outputs.has_makefile }}"
        echo ""
        echo "💡 RECOMENDACIONES:"
        if [ "${{ needs.explore.outputs.has_makefile }}" = "false" ]; then
          echo "❌ Este no parece ser un repositorio de kernel Linux"
        elif [ "${{ needs.explore.outputs.has_defconfig }}" = "false" ]; then
          echo "⚠️  Falta archivo de configuración (defconfig)"
          echo "   Necesitas agregar un archivo .config o defconfig"
        else
          echo "✅ El repositorio tiene estructura de kernel"
        fi
