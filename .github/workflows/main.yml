name: Build NetHunter Kernel - A23

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  analyze-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Análisis completo del repositorio
      id: analysis
      run: |
        echo "🔍 ANALIZANDO REPOSITORIO..."
        echo "============================"
        
        # Verificar estructura básica
        echo "📁 CONTENIDO DE LA RAÍZ:"
        ls -la
        
        echo ""
        echo "📊 ARCHIVOS CLAVE:"
        echo "Makefile: $(if [ -f Makefile ]; then echo '✅ SÍ'; else echo '❌ NO'; fi)"
        echo "Kbuild: $(find . -name Kbuild -type f | head -1 | xargs basename 2>/dev/null || echo '❌ NO')"
        echo "Kconfig: $(find . -name Kconfig -type f | head -1 | xargs basename 2>/dev/null || echo '❌ NO')"
        echo "defconfig: $(find . -name '*defconfig' -type f | head -1 | xargs basename 2>/dev/null || echo '❌ NO')"
        
        echo ""
        echo "📋 EXTENSIONES DE ARCHIVOS:"
        find . -type f -name "*.*" | sed 's/.*\.//' | sort | uniq -c | sort -nr | head -5 || echo "No hay archivos con extensiones"
        
        echo ""
        echo "📦 TIPOS DE ARCHIVOS:"
        file $(find . -type f | head -10) 2>/dev/null || echo "No se pudo determinar tipos de archivo"

    - name: Instalar dependencias
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git bc bison flex libssl-dev make \
          gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi \
          libncurses-dev liblz4-tool python3 \
          zip unzip curl wget file

    - name: Intentar diferentes enfoques de compilación
      run: |
        echo "🔄 PROBANDO DIFERENTES MÉTODOS..."
        echo "================================="
        
        # Método 1: Buscar ANY Makefile en cualquier subdirectorio
        echo ""
        echo "1️⃣ BUSCANDO CUALQUIER MAKEFILE..."
        MAKEFILES=$(find . -name Makefile -type f | head -5)
        if [ -n "$MAKEFILES" ]; then
          echo "✅ Makefiles encontrados:"
          echo "$MAKEFILES"
          
          # Tomar el primer Makefile encontrado
          FIRST_MAKEFILE=$(echo "$MAKEFILES" | head -1)
          MAKEFILE_DIR=$(dirname "$FIRST_MAKEFILE")
          echo "📁 Usando directorio: $MAKEFILE_DIR"
          
          cd "$MAKEFILE_DIR"
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          # Intentar compilar
          echo "🔨 Intentando compilar en $MAKEFILE_DIR..."
          make -j2 || echo "⚠️ Compilación falló, pero continuamos..."
          
        else
          echo "❌ No se encontró ningún Makefile"
        fi
        
        # Volver al directorio raíz
        cd "$GITHUB_WORKSPACE"

        # Método 2: Buscar archivos de kernel específicos
        echo ""
        echo "2️⃣ BUSCANDO ESTRUCTURA DE KERNEL..."
        if [ -d "arch/arm64" ]; then
          echo "✅ Encontrado: arch/arm64/"
          echo "📋 Contenido de arch/arm64:"
          ls -la arch/arm64/ 2>/dev/null || echo "No se puede listar"
        else
          echo "❌ No hay directorio arch/arm64"
        fi
        
        if [ -d "drivers" ]; then
          echo "✅ Encontrado: drivers/"
        else
          echo "❌ No hay directorio drivers"
        fi

    - name: Crear archivo de resultados
      run: |
        echo "📊 CREANDO REPORTE FINAL..."
        mkdir -p results
        
        # Recopilar información importante
        find . -name "Makefile" -o -name "*.c" -o -name "*.h" -o -name "*.dts" | head -20 > results/files-list.txt
        ls -la > results/root-contents.txt
        
        # Crear reporte
        cat > results/REPORT.md << EOF
        # Reporte del Repositorio A23kernetnh
        
        ## Análisis
        - **Fecha**: $(date)
        - **Commit**: $GITHUB_SHA
        - **URL**: https://github.com/$GITHUB_REPOSITORY
        
        ## Estructura
        \`\`\`
        $(find . -type d | sort | head -20)
        \`\`\`
        
        ## Recomendaciones
        $(if [ -f Makefile ]; then 
          echo "- ✅ Tiene Makefile en raíz - puede ser un kernel"
          echo "- 💡 Configurar GitHub Actions para compilación normal"
        elif [ -n "$(find . -name Makefile -type f)" ]; then
          echo "- ⚠️ Tiene Makefile en subdirectorios - estructura inusual"
          echo "- 💡 Especificar ruta exacta del Makefile en el workflow"
        else
          echo "- ❌ NO tiene Makefile - no es un árbol de kernel estándar"
          echo "- 💡 Considerar:"
          echo "  1. Agregar un Makefile si es un kernel"
          echo "  2. Usar un repositorio base de kernel y aplicar cambios"
          echo "  3. Reestructurar el proyecto"
        fi)
        EOF
        
        # Crear ZIP con resultados
        zip -r repository-analysis.zip results/

    - name: Subir artifacts de análisis
      uses: actions/upload-artifact@v4
      with:
        name: repository-analysis
        path: |
          repository-analysis.zip
          results/
        retention-days: 30

    - name: Mostrar conclusión
      run: |
        echo ""
        echo "🎯 CONCLUSIÓN"
        echo "============="
        if [ -f Makefile ]; then
          echo "✅ Este repositorio TIENE Makefile en raíz"
          echo "💡 Puede ser compilado como kernel normal"
        elif [ -n "$(find . -name Makefile -type f)" ]; then
          echo "⚠️ Este repositorio tiene Makefile en subdirectorios"
          echo "💡 Necesita configuración especial en GitHub Actions"
        else
          echo "❌ Este repositorio NO TIENE Makefile"
          echo "💡 No es un árbol de kernel Linux estándar"
          echo ""
          echo "📝 OPCIONES:"
          echo "1. Si es código de kernel, agregar Makefile"
          echo "2. Si son parches, aplicar sobre kernel base"
          echo "3. Si es otro tipo de proyecto, reconsiderar el enfoque"
        fi
